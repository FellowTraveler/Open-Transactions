#########################################################################
#									#
#									#
#	##		INSTALL - openSUSE			##	#
#									#
#									#
#########################################################################

This instructions have only been tested with openSUSE 12.3, but should work with all recent openSUSE versions.

# install general developer tools
$ sudo zypper install --type pattern devel_basis

# install general developer dependencies
$ sudo zypper in libtool wget cmake zlib-devel googletest-devel

# install Open-Transactions library dependencies
$ sudo zypper in libzmq3 zeromq-devel openssl libopenssl1_0_0 libopenssl-devel libprotobuf7 libprotobuf-lite7 protobuf-devel

# get and install libmsgpack and libmsgpack-devel from build service
http://software.opensuse.org/package/libmsgpack?search_term=libmsgpack
$ sudo zypper in libmsgpack libmsgpack-devel

# ZMQ C++ binding
Unfortunatly the CPP binding for ZMQ is currently not included in the zeromq-devel.
You have to download it from there github (https://github.com/zeromq/cppzmq) and copy the zmq.hpp manually to /usr/include.

#########    Optional API deps:   #########

$ sudo zypper in ...

SWIG JAVA:         java-1_7_0-openjdk java-1_7_0-openjdk-devel
SWIG PERL5: (tba)
SWIG PHP:          php5 php5-devel
SWIG PYTHON:       python-devel
SWIG RUBY:         ruby ruby-devel ruby-devel-extra
SWIG TCL:          tcl tcl-devel
SWIG CSHARP:       mono-complete mono-devel

SWIG D:
# find .rpm for "gdc" d-compiler front end for gcc
# or build-install "gdc" yourself from source


######## Download opentxs #############
# fetch O-T and prepare your copy for build

# 'stable' source tar ball method
$ wget -c http://sourceforge.net/projects/opentxs/files/latest/download
$ tar -zxvf opentxs-*
$ cd opentxs-*
$ ./autogen.sh

### OR ###

# git pull latest development source method
$ git clone git://github.com/Open-Transactions/Open-Transactions.git
$ cd Open-Transactions
$ ./autogen.sh

########################################


$ ./configure


#########   Configure Options:   #########

Debug Mode:      --enable-debug
Signal Handling: --enable-sighandler
Warnings:        --enable-warnings

Release Mode:    --enable-release
(default)

(Optional)
System Keyring:  --with-keyring=ARG
Arguments:       gnome, kwallet, windows or mac

opentxs Autocompletion: --with-bashcompletion=/etc/bash_completion.d/

Enable OTAPI support for swig wrapper:
       Java:     --with-java
       Perl 5:   --with-perl5
       PHP:      --with-php
       Python:   --with-python
       Ruby:     --with-ruby
       TCL:      --with-tcl
       CSHARP:   --with-csharp
       D:        --with-d
       Go:       --with-go

##########################################

$ sudo make uninstall (cleanup from possible previous build)

$ make

Build Multithreaded, need about 1gb of ram per thread.
-j (int)

Install to system

$ sudo make install

Link the libraries

$ sudo ldconfig


###########   Miscellaneous Notes:   ###########

## Load some sample data to look at an example wallet 
!!! WARNING : will reset all user data !!!
$ mkdir -p ~/.ot && cp -R sample-data/ot-sample-data/* ~/.ot

# also can checkout tarball of sample contracts, baskets, server
$ cd /usr/local/share/opentxs
$ tar -xvf user-samples.tar.gz
$ ls


# to run otserver as a foreground process:
$ otserver

# to run otserver as a background process, configure it using:
$ ./configure --with-keyring=flatfile 
# plus any other desired options, compile and install as usual,

$ cp dev/Open-Transactions/sample-data/ot-sample-data/background_server.cfg $HOME/.ot/server.cfg

# and change the password_folder path to a location appropriate for your system.
$ mkdir $HOME/.ot/server_data/passphrase

# Run and create otserver as usual as a foreground process and enter the passphrase when requested.
# Then press Ctrl-c to exit the server, 
$ cd to $HOME/.ot/server_data and rm ot.pid
$ cd $HOME/.ot (or any other folder you want to run otserver from and store its log file in)

# The following command will run otserver as a daemon process in the background:

$ nohup otserver &

# All server output will be redirected to a 'nohup.out' file in the folder you 
# launch otserver from. The pid of the daemon process will be listed after you 
# press return. It is also listed in $HOME/.ot/server_data/ot.pid, in case you forget it.

# To kill the server daemon process, enter:

$ cd $HOME/.ot/server_data
$ cat ot.pid to display the process id <pid> of the daemon process that is running the server
$ kill <pid>
$ rm ot.pid


# for python client api support export env variable
$ export PYTHONPATH=/usr/local/lib:$PYTHONPATH

################################################
